# -*- coding: utf-8 -*-
"""ИТМ-23_Хабибуллина_Камилла_Лаб_3_np.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fVFmOj7yOI0aolx65vJONtag-dKHolD1
"""



"""Задача №1 np
Вычисление n-го числа из последовательности Фибоначчи происходит по формуле Бине.
Вариант с функцией lambda:
"""

import math
fib =  lambda n: round((math.pow((1 + math.sqrt(5)) / 2, n-1) - math.pow((1 - math.sqrt(5)) / 2, n-1)) / math.sqrt(5))
fib(16)

"""Задача №2-np . Лист с 16-тью числами Фибоначчи  с исп. конструкции listcomprehension"""

f = [0, 1]
[f.append(f[-1] + f[-2]) for x in range(14)]
print(f)

"""Задача №3-np. Создадим 2д лист с числами Фибоначчи fA = [[0,1,1,2]...[...610]], исп 1д список [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610]"""

f = [0, 1]
[f.append(f[-1] + f[-2]) for _ in range(14)]
Q = 4
fA = [[f[(Ai-1)*Q + Aj] for Aj in range(0, Q)] for Ai in range(1, 5)]
print(fA)

"""
Создадим процедуру печати print_matrix(fA) для распечатки таблицы без выравнивания"""



f = [0, 1]
[f.append(f[-1] + f[-2]) for x in range(14)]
Q = 4
fA = [[f[(Ai-1)*Q + Aj] for Aj in range(0, Q)] for Ai in range(1, 5)]
print('Таблица fA')
def print_matrix(fA):
    for i in range(len(fA)):
        for j in range(len(fA[i])):
            print(fA[i][j], end=' ')
        print()
print_matrix(fA)

"""Создадим процедуру печати print_matrix(fA) для распечатки таблицы с выравниванием по правому краю




"""

f = [0, 1]
[f.append(f[-1] + f[-2]) for x in range(14)]
Q = 4
fA = [[f[(Ai-1)*Q + Aj] for Aj in range(0, Q)] for Ai in range(1, 5)]
print('Таблица fA')
def print_matrix(fA):
    for row in fA:
        for value in row:
            print(f"{value:>3}", end=' ')
        print()
print_matrix(fA)

"""Задача №4-np. Построим остальные таблицы fB-fH"""

f = [0, 1]
[f.append(f[-1] + f[-2]) for x in range(14)]
Q = 4
fB = [[f[(Bj-1)*Q + Bi] for Bj in range(1, 5)] for Bi in range(0, Q)]
print('Таблица fB')
def print_matrix(fB):
    for row in fB:
        for value in row:
            print(f"{value:>3}", end=' ')
        print()

print_matrix(fB)

f = [0, 1]
[f.append(f[-1] + f[-2]) for x in range(14)]
Q = 4
fC = [[f[(Q * Ci - Cj-1)] for Cj in range(Q)] for Ci in range(1,Q+1)]
print('Таблица fC')
def print_matrix(fC):
    for row in fC:
        for value in row:
            print(f"{value:>3}", end=' ')
        print()
print_matrix(fC)

f = [0, 1]
[f.append(f[-1] + f[-2]) for x in range(14)]
Q = 4
fD = [[f[Dj*Q-Di-1] for Dj in range(1,Q+1)] for Di in range(Q)]
print('Таблица fD')
def print_matrix(fD):
    for row in fD:
        for value in row:
            print(f"{value:>3}", end=' ')
        print()

print_matrix(fD)

f = [0, 1]
[f.append(f[-1] + f[-2]) for x in range(14)]
Q = 4
fE = [[f[Q * (Q - Ei - 1) + (Ej - 1)] for Ej in range(1, Q + 1)] for Ei in range(Q)]
print('Таблица fE')
def print_matrix(fE):
    for row in fE:
        for value in row:
            print(f"{value:>3}", end=' ')
        print()

print_matrix(fE)

f = [0, 1]
[f.append(f[-1] + f[-2]) for x in range(14)]
Q = 4
fF = [[f[(Q-Fj-1)*Q+Fi-1] for Fj in range(Q)] for Fi in range(1, Q + 1)]
print('Таблица fF')
def print_matrix(fF):
    for row in fF:
        for value in row:
            print(f"{value:>3}", end=' ')
        print()

print_matrix(fF)

f = [0, 1]
[f.append(f[-1] + f[-2]) for x in range(14)]
Q = 4
fG = [[f[(Q-Gi-1)*Q+(Q-Gj)] for Gj in range(1, Q + 1)] for Gi in range(Q)]
print('Таблица fG')
def print_matrix(fG):
    for row in fG:
        for value in row:
            print(f"{value:>3}", end=' ')
        print()

print_matrix(fG)

f = [0, 1]
[f.append(f[-1] + f[-2]) for x in range(14)]
Q = 4
fH = [[f[(Q-Hj-1)*Q+(Q-Hi)] for Hj in range(Q)] for Hi in range(1, Q + 1)]
print('Таблица fH')
def print_matrix(fH):
    for row in fH:
        for value in row:
            print(f"{value:>3}", end=' ')
        print()

print_matrix(fH)

"""Задача №5-np. Сделаем развертки в одномерный лист list fibA...fibH для всех 8 таблиц, код в одну строку."""

#4.1A
f = [0, 1]
[f.append(f[-1] + f[-2]) for x in range(14)]
Q = 4
fA = [[f[(Ai-1)*Q + Aj] for Aj in range(Q)] for Ai in range(1, Q+1)]
#4.2B
fB = [[f[(Bj-1)*Q + Bi] for Bj in range(1, Q+1)] for Bi in range(Q)]
#4.3C
fC = [[f[(Q * Ci - Cj-1)] for Cj in range(Q)] for Ci in range(1,Q+1)]
#4.4D
fD = [[f[Dj*Q-Di-1] for Dj in range(1,Q+1)] for Di in range(Q)]
#4.5E
fE = [[f[Q * (Q - Ei - 1) + (Ej - 1)] for Ej in range(1, Q + 1)] for Ei in range(Q)]
#4.6F
fF = [[f[(Q-Fj-1)*Q+Fi-1] for Fj in range(Q)] for Fi in range(1, Q + 1)]
#4.7G
fG = [[f[(Q-Gi-1)*Q+(Q-Gj)] for Gj in range(1, Q + 1)] for Gi in range(Q)]
#4.8H
fH = [[f[(Q-Hj-1)*Q+(Q-Hi)] for Hj in range(Q)] for Hi in range(1, Q + 1)]
#5
Ai = [ni//Q for ni in range(16)]
Aj=[ni% Q for ni in range(16)]
fibA = [fA[Ai[ni]][Aj[ni]]for ni in range(16)]
print(f'Ai = {Ai}\nAj = {Aj}\nfibA{fibA}')
print('')
#5.1
Bj = [ni//Q for ni in range(16)]
Bi=[ni% Q for ni in range(16)]
fibB = [fB[Bi[ni]][Bj[ni]]for ni in range(16)]
print(f'Bi = {Bi}\nBj = {Bj}\nfibB{fibB}')
print('')
#5.2
Ci = [(ni)//Q for ni in range(16)]
Cj=[(4-ni% Q)-1 for ni in range(16)]
fibC = [fC[Ci[ni]][Cj[ni]]for ni in range(16)]
print(f'Ci = {Ci}\nCj = {Cj}\nfibC{fibC}')
print('')
#5.3
Dj = [(ni)//Q for ni in range(16)]
Di=[(4-ni% Q)-1 for ni in range(16)]
fibD = [fD[Di[ni]][Dj[ni]]for ni in range(16)]
print(f'Di = {Di}\nDj = {Dj}\nfibD{fibD}')
print('')
#5.4
Ej = [(ni)%Q for ni in range(16)]
Ei=[(4-ni// Q)-1 for ni in range(16)]
fibE = [fE[Ei[ni]][Ej[ni]]for ni in range(16)]
print(f'Ei = {Ei}\nEj = {Ej}\nfibE{fibE}')
print('')
#5.5
Fj = [(4-ni//Q)-1 for ni in range(16)]
Fi=[ni% Q for ni in range(16)]
fibF = [fF[Fi[ni]][Fj[ni]]for ni in range(16)]
print(f'Fi = {Fi}\nFj = {Fj}\nfibF{fibF}')
print('')
#5.6
Gj = [(Q-ni%Q)-1 for ni in range(16)]
Gi=[(Q-ni//Q)-1 for ni in range(16)]
fibG = [fG[Gi[ni]][Gj[ni]]for ni in range(16)]
print(f'Gi = {Gi}\nGj = {Gj}\nfibG{fibG}')
print('')
#5.7
Hj = [(Q-ni//Q)-1 for ni in range(16)]
Hi=[(Q-ni%Q)-1 for ni in range(16)]
fibH = [fH[Hi[ni]][Hj[ni]]for ni in range(16)]
print(f'Hi = {Hi}\nHj = {Hj}\nfibH{fibH}')
print('')

"""Задачи по работе с массивами с использованием NumPy
Задание №1+np .Использованием numpy.reshape
"""

#4.1A
f = [0, 1]
[f.append(f[-1] + f[-2]) for x in range(14)]
Q = 4
fA = [[f[(Ai-1)*Q + Aj] for Aj in range(Q)] for Ai in range(1, Q+1)]
#4.2B
fB = [[f[(Bj-1)*Q + Bi] for Bj in range(1, Q+1)] for Bi in range(Q)]
#4.3C
fC = [[f[(Q * Ci - Cj-1)] for Cj in range(Q)] for Ci in range(1,Q+1)]
#4.4D
fD = [[f[Dj*Q-Di-1] for Dj in range(1,Q+1)] for Di in range(Q)]
#4.5E
fE = [[f[Q * (Q - Ei - 1) + (Ej - 1)] for Ej in range(1, Q + 1)] for Ei in range(Q)]
#4.6F
fF = [[f[(Q-Fj-1)*Q+Fi-1] for Fj in range(Q)] for Fi in range(1, Q + 1)]
#4.7G
fG = [[f[(Q-Gi-1)*Q+(Q-Gj)] for Gj in range(1, Q + 1)] for Gi in range(Q)]
#4.8H
fH = [[f[(Q-Hj-1)*Q+(Q-Hi)] for Hj in range(Q)] for Hi in range(1, Q + 1)]
#5
Ai = [ni//Q for ni in range(16)]
Aj=[ni% Q for ni in range(16)]
fibA = [fA[Ai[ni]][Aj[ni]]for ni in range(16)]
#5.1
Bj = [ni//Q for ni in range(16)]
Bi=[ni% Q for ni in range(16)]
fibB = [fB[Bi[ni]][Bj[ni]]for ni in range(16)]
#5.2
Ci = [(ni)//Q for ni in range(16)]
Cj=[(4-ni% Q)-1 for ni in range(16)]
fibC = [fC[Ci[ni]][Cj[ni]]for ni in range(16)]
#5.3
Dj = [(ni)//Q for ni in range(16)]
Di=[(4-ni% Q)-1 for ni in range(16)]
fibD = [fD[Di[ni]][Dj[ni]]for ni in range(16)]
#5.4
Ej = [(ni)%Q for ni in range(16)]
Ei=[(4-ni// Q)-1 for ni in range(16)]
fibE = [fE[Ei[ni]][Ej[ni]]for ni in range(16)]
#5.5
Fj = [(4-ni//Q)-1 for ni in range(16)]
Fi=[ni% Q for ni in range(16)]
fibF = [fF[Fi[ni]][Fj[ni]]for ni in range(16)]
#5.6
Gj = [(Q-ni%Q)-1 for ni in range(16)]
Gi=[(Q-ni//Q)-1 for ni in range(16)]
fibG = [fG[Gi[ni]][Gj[ni]]for ni in range(16)]
#5.7
Hj = [(Q-ni//Q)-1 for ni in range(16)]
Hi=[(Q-ni%Q)-1 for ni in range(16)]
fibH = [fH[Hi[ni]][Hj[ni]]for ni in range(16)]

import numpy as np
#1.1-A
Afib = np.array([fA[Ai[ni]][Aj[ni]] for ni in range(16)])
print(f'1d-массив Afib\n{Afib}\n')
Aarr=Afib.reshape(4,4)
print(f'2d-массив Aarr\n{Aarr}')
#1.2-B
Bfib = np.array([fB[Ai[ni]][Aj[ni]] for ni in range(16)])
print(f'1d-массив Bfib\n{Bfib}\n')
Barr=Bfib.reshape(4,4)
print(f'2d-массив Barr\n{Barr}')
#1.3-C
Cfib = np.array([fC[Ai[ni]][Aj[ni]] for ni in range(16)])
print(f'1d-массив Cfib\n{Cfib}\n')
Carr=Cfib.reshape(4,4)
print(f'2d-массив Carr\n{Carr}')
#1.4-D
Dfib = np.array([fD[Ai[ni]][Aj[ni]] for ni in range(16)])
print(f'1d-массив Dfib\n{Dfib}\n')
Darr=Dfib.reshape(4,4)
print(f'2d-массив Darr\n{Darr}')
#1.5-E
Efib = np.array([fE[Ai[ni]][Aj[ni]] for ni in range(16)])
print(f'1d-массив Efib\n{Efib}\n')
Earr=Efib.reshape(4,4)
print(f'2d-массив Earr\n{Earr}')
#1.5-F
Ffib = np.array([fF[Ai[ni]][Aj[ni]] for ni in range(16)])
print(f'1d-массив Ffib\n{Ffib}\n')
Farr=Ffib.reshape(4,4)
print(f'2d-массив Farr\n{Farr}')
#1.5-G
Gfib = np.array([fG[Ai[ni]][Aj[ni]] for ni in range(16)])
print(f'1d-массив Gfib\n{Gfib}\n')
Garr=Gfib.reshape(4,4)
print(f'2d-массив Garr\n{Garr}')
#1.8-H
Hfib = np.array([fH[Ai[ni]][Aj[ni]] for ni in range(16)])
print(f'1d-массив Hfib\n{Hfib}\n')
Harr=Hfib.reshape(4,4)
print(f'2d-массив Harr\n{Harr}')

"""Задание № 1.1+np . Метод numpy.flip(m,axis =None)"""

import numpy as np
f = [0, 1]
[f.append(f[-1] + f[-2]) for x in range(14)]
Q = 4
fA = [[f[(Ai-1)*Q + Aj] for Aj in range(Q)] for Ai in range(1, Q+1)]
#4.2B
fB = [[f[(Bj-1)*Q + Bi] for Bj in range(1, Q+1)] for Bi in range(Q)]
#4.3C
fC = [[f[(Q * Ci - Cj-1)] for Cj in range(Q)] for Ci in range(1,Q+1)]
#4.4D
fD = [[f[Dj*Q-Di-1] for Dj in range(1,Q+1)] for Di in range(Q)]
#4.5E
fE = [[f[Q * (Q - Ei - 1) + (Ej - 1)] for Ej in range(1, Q + 1)] for Ei in range(Q)]
#4.6F
fF = [[f[(Q-Fj-1)*Q+Fi-1] for Fj in range(Q)] for Fi in range(1, Q + 1)]
#4.7G
fG = [[f[(Q-Gi-1)*Q+(Q-Gj)] for Gj in range(1, Q + 1)] for Gi in range(Q)]
#4.8H
fH = [[f[(Q-Hj-1)*Q+(Q-Hi)] for Hj in range(Q)] for Hi in range(1, Q + 1)]
#5
Ai = [ni//Q for ni in range(16)]
Aj=[ni% Q for ni in range(16)]
fibA = [fA[Ai[ni]][Aj[ni]]for ni in range(16)]
#5.1
Bj = [ni//Q for ni in range(16)]
Bi=[ni% Q for ni in range(16)]
fibB = [fB[Bi[ni]][Bj[ni]]for ni in range(16)]
#5.2
Ci = [(ni)//Q for ni in range(16)]
Cj=[(4-ni% Q)-1 for ni in range(16)]
fibC = [fC[Ci[ni]][Cj[ni]]for ni in range(16)]
#5.3
Dj = [(ni)//Q for ni in range(16)]
Di=[(4-ni% Q)-1 for ni in range(16)]
fibD = [fD[Di[ni]][Dj[ni]]for ni in range(16)]
#5.4
Ej = [(ni)%Q for ni in range(16)]
Ei=[(4-ni// Q)-1 for ni in range(16)]
fibE = [fE[Ei[ni]][Ej[ni]]for ni in range(16)]
#5.5
Fj = [(4-ni//Q)-1 for ni in range(16)]
Fi=[ni% Q for ni in range(16)]
fibF = [fF[Fi[ni]][Fj[ni]]for ni in range(16)]
#5.6
Gj = [(Q-ni%Q)-1 for ni in range(16)]
Gi=[(Q-ni//Q)-1 for ni in range(16)]
fibG = [fG[Gi[ni]][Gj[ni]]for ni in range(16)]
#5.7
Hj = [(Q-ni//Q)-1 for ni in range(16)]
Hi=[(Q-ni%Q)-1 for ni in range(16)]
fibH = [fH[Hi[ni]][Hj[ni]]for ni in range(16)]

#1.1-A
Afib = np.array([fA[Ai[ni]][Aj[ni]] for ni in range(16)])
Aarr=Afib.reshape(4,4)
#1.2-B
Bfib = np.array([fB[Ai[ni]][Aj[ni]] for ni in range(16)])
Barr=Bfib.reshape(4,4)
#1.3-C
Cfib = np.array([fC[Ai[ni]][Aj[ni]] for ni in range(16)])
Carr=Cfib.reshape(4,4)
#1.4-D
Dfib = np.array([fD[Ai[ni]][Aj[ni]] for ni in range(16)])
Darr=Dfib.reshape(4,4)
#1.5-E
Efib = np.array([fE[Ai[ni]][Aj[ni]] for ni in range(16)])
Earr=Efib.reshape(4,4)
#1.5-F
Ffib = np.array([fF[Ai[ni]][Aj[ni]] for ni in range(16)])
Farr=Ffib.reshape(4,4)
#1.5-G
Gfib = np.array([fG[Ai[ni]][Aj[ni]] for ni in range(16)])
Garr=Gfib.reshape(4,4)
#1.8-H
Hfib = np.array([fH[Ai[ni]][Aj[ni]] for ni in range(16)])
Harr=Hfib.reshape(4,4)
#Задание № 1.1+np . Метод numpy.flip(m,axis =None)
print('Все повороты таблицы A')
print(f'2d-массив Aarr\n{Aarr}\n')
print(f'np.flip(Aarr,None)   = Gfib\n{np.flip(Aarr)}\n')
print(f'np.flip(Aarr,axis=0) = Efib\n{np.flip(Aarr,axis=0)}\n')
print(f'np.flip(Aarr,axis=1) = Cfib\n{np.flip(Aarr,axis=1)}\n')

print('Все повороты таблицы B')
print(f'2d-массив Barr\n{Barr}\n')
print(f'np.flip(Barr,None)   = Hfib\n{np.flip(Barr)}\n')
print(f'np.flip(Barr,axis=0) = Dfib\n{np.flip(Barr,axis=0)}\n')
print(f'np.flip(Barr,axis=1) = Ffib\n{np.flip(Barr,axis=1)}\n')

print('Все повороты таблицы C')
print(f'2d-массив Carr\n{Carr}\n')
print(f'np.flip(Carr,None)   = Efib\n{np.flip(Carr)}\n')
print(f'np.flip(Carr,axis=0) = Gfib\n{np.flip(Carr,axis=0)}\n')
print(f'np.flip(Carr,axis=1) = Afib\n{np.flip(Carr,axis=1)}\n')

print('Все повороты таблицы D')
print(f'2d-массив Darr\n{Darr}\n')
print(f'np.flip(Darr,None)   = Ffib\n{np.flip(Darr)}\n')
print(f'np.flip(Darr,axis=0) = Bfib\n{np.flip(Darr,axis=0)}\n')
print(f'np.flip(Darr,axis=1) = Hfib\n{np.flip(Darr,axis=1)}\n')

print('Все повороты таблицы E')
print(f'2d-массив Earr\n{Earr}\n')
print(f'np.flip(Earr,None)   = Cfib\n{np.flip(Earr)}\n')
print(f'np.flip(Earr,axis=0) = Afib\n{np.flip(Earr,axis=0)}\n')
print(f'np.flip(Earr,axis=1) = Gfib\n{np.flip(Earr,axis=1)}\n')

print('Все повороты таблицы F')
print(f'2d-массив Farr\n{Farr}\n')
print(f'np.flip(Farr,None)   = Dfib\n{np.flip(Farr)}\n')
print(f'np.flip(Farr,axis=0) = Hfib\n{np.flip(Farr,axis=0)}\n')
print(f'np.flip(Farr,axis=1) = Afib\n{np.flip(Farr,axis=1)}\n')

print('Все повороты таблицы G')
print(f'2d-массив Garr\n{Garr}\n')
print(f'np.flip(Garr,None)   = Afib\n{np.flip(Garr)}\n')
print(f'np.flip(Garr,axis=0) = Cfib\n{np.flip(Garr,axis=0)}\n')
print(f'np.flip(Garr,axis=1) = Efib\n{np.flip(Garr,axis=1)}\n')

print('Все повороты таблицы H')
print(f'2d-массив Harr\n{Harr}\n')
print(f'np.flip(Harr,None)   = Bfib\n{np.flip(Harr)}\n')
print(f'np.flip(Harr,axis=0) = Ffib\n{np.flip(Harr,axis=0)}\n')
print(f'np.flip(Harr,axis=1) = Dfib\n{np.flip(Harr,axis=1)}\n')

"""Задание № 1.2+np .
метод numpy.flipud(m)

1)Методом numpy.rot(m) из табл А можно сделать таблицы:
*   np.rot90(Aarr)   = Dfib
*   np.rot90(Aarr,2)   = Gfib
*   np.rot90(Aarr, 1, (1,0)))   = Ffib
2)Методом numpy.fliplr(m) из табл А можно сделать таблицы:
*   np.fliplr(Aarr)   = Cfib
Функция numpy.fliplr() используется для переворачивания 2D-массива по горизонтали, при этом порядок столбцов сохраняется, но они появляются в другом порядке.

3)Методом numpy.flipud(m) из табл А можно сделать таблицы:
*   np.flipud(Aarr)   = Efib
 Метод переворачивает порядок элементов вдоль оси 0(верх/вниз)
"""

import numpy as np
f = [0, 1]
[f.append(f[-1] + f[-2]) for x in range(14)]
Q = 4
fA = [[f[(Ai-1)*Q + Aj] for Aj in range(Q)] for Ai in range(1, Q+1)]

#5
Ai = [ni//Q for ni in range(16)]
Aj=[ni% Q for ni in range(16)]
fibA = [fA[Ai[ni]][Aj[ni]]for ni in range(16)]


#1.1-A
Afib = np.array([fA[Ai[ni]][Aj[ni]] for ni in range(16)])
Aarr=Afib.reshape(4,4)

#повороты rot
print('повороты rot таблицы A')
print(f'2d-массив Aarr\n{Aarr}\n')
print(f'np.rot90(Aarr)   = Dfib\n{np.rot90(Aarr)}\n')

print(f'np.rot90(Aarr,2)   = Gfib\n{np.rot90(Aarr,2)}\n')

print(f'np.rot90(Aarr, 1, (1,0)))   = Ffib\n{np.rot90(Aarr, 1, (1,0))}\n')

#повороты fliplr
print('повороты fliplr таблицы A')
print(f'np.fliplr(Aarr)   = Cfib\n{np.fliplr(Aarr)}\n')

#повороты flipud
print('повороты flipud таблицы A')
print(f'np.flipud(Aarr)   = Efib\n{np.flipud(Aarr)}\n')

"""Задание №1.3 +np ."""

import numpy as np
A = np.arange(8).reshape((2,2,2))
print(A)
print(np.flip(A, 0))
print(np.flip(A, 1))
print(np.flip(A))
print(np.flip(A, (0, 2)))

import numpy as np
m = np.array([[1,2],[3,4]], int)
print(m)
print('')
print(np.rot90(m))
print('')
print(np.rot90(m, 2))
m = np.arange(8).reshape((2,2,2))
print(m)
print(np.rot90(m, 1, (1,2)))