# -*- coding: utf-8 -*-
"""Хабибуллина_Камилла_Курсовая работа .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zXjersUfvsKrQ4TWg2FlWgdnHhluZ9Hx

**Пример 1: Использование функции numpy.polyfit для полиномиальной интерполяции**
"""

import numpy as np
import matplotlib.pyplot as plt

# Задаем исходные точки
x = np.array([0, 1])
y = np.array([1, 2])

# Полиномиальная интерполяция степени 1 (линейный полином)
coeffs = np.polyfit(x, y, 1)

# Создание функции полинома из коэффициентов
polynomial = np.poly1d(coeffs)

# Генерация точек для построения графика
x_interp = np.linspace(0, 5, 100)
y_interp = polynomial(x_interp)

plt.scatter(x, y, color='red', label='Исходные точки')
plt.plot(x_interp, y_interp, label='Линейный полином', color='blue')
plt.title('Полиномиальная интерполяция с использованием NumPy')
plt.xlabel('x')
plt.ylabel('y')
plt.legend()
plt.grid()
plt.show()

"""**Пример 2: Использование функции scipy.interpolate.interp1d для однородной интерполяции**

"""

import matplotlib.pyplot as plt
from scipy import interpolate

# Исходные точки
x = [0, 1]  
y = [1, 2]  

# Создание интерполяционной функции
interp_func = interpolate.interp1d(x, y, kind='linear', fill_value='extrapolate')

# Генерация точек для интерполяции от 0 до 5
x_new = [i for i in range(6)]  # Значения от 0 до 5
y_new = [interp_func(x_val) for x_val in x_new]

# Визуализация
plt.plot(x_new, y_new, label='Линейная интерполяция', color='blue')
plt.scatter(x, y, color='crimson', label='Исходные точки')
plt.title('Интерполяция с использованием SciPy')
plt.xlabel('x')
plt.ylabel('y')
plt.xlim(0, 5)  # Ограничиваем ось X от 0 до 5
plt.ylim(0, 6)  # Ограничиваем ось Y от 0 до 6
plt.legend()
plt.grid()
plt.show()

import numpy as np
import matplotlib.pyplot as plt
from numpy.polynomial import Polynomial

# Исходные данные
x = np.array([-3,-2,-1])
y = np.array([9,4,1])

# Построение квадратического полинома
p = Polynomial.fit(x, y, 2)

# Значения для интерполяции
x_eval = np.linspace(-3, 3, 100)
y_eval = p(x_eval)

# Визуализация
plt.figure(figsize=(10, 6))
plt.plot(x_eval, y_eval, label='Квадратическая интерполяция', color='blue')
plt.scatter(x, y, color='red', label='Исходные узлы')
plt.title('Квадратическая интерполяция')
plt.xlabel('x')
plt.ylabel('y')
plt.legend()
plt.grid()
plt.show()

import numpy as np
import matplotlib.pyplot as plt
from numpy.polynomial import Polynomial

# Исходные данные
x=np.array([-3, 0, 1, 3])
y=np.array([-24, 3, 4, 30])

# Построение кубического полинома
p_cubic = Polynomial.fit(x, y, 3)

# Значения для интерполяции
x_eval = np.linspace(-3, 3, 100)

# Получение значений для кубического полинома
y_eval_cubic = p_cubic(x_eval)


# Визуализация
plt.figure(figsize=(8, 7))
plt.plot(x_eval, y_eval_cubic, label='Кубический полином', color='green')  # Зеленый цвет для кубического полинома
plt.scatter(x, y, color='red', label='Исходные узлы')
plt.title('Кубическая интерполяция')
plt.xlabel('x')
plt.ylabel('y')
plt.legend()
plt.grid()
plt.show()

import numpy as np
import matplotlib.pyplot as plt
from numpy.polynomial import Polynomial
from scipy.interpolate import CubicSpline

# Исходные данные
x = np.array([-3, 0, 1, 3])
y = np.array([-24, 3, 4, 30])

# Построение кубического полинома
p_cubic = Polynomial.fit(x, y, 3)

# Создание кубического сплайна
cs = CubicSpline(x, y, bc_type='natural')

# Значения для интерполяции
x_eval = np.linspace(-3, 3, 100)

# Получение значений для кубического полинома и сплайна
y_eval_cubic = p_cubic(x_eval)
y_eval_spline = cs(x_eval)

# Визуализация
plt.figure(figsize=(8, 7))
plt.plot(x_eval, y_eval_cubic, label='Кубический полином', color='green', linewidth=2)  # Зеленый цвет для кубического полинома
plt.plot(x_eval, y_eval_spline, label='Кубический сплайн', color='blue', linestyle='--')   # Голубой цвет для сплайна, линия по умолчанию - пунктирная
plt.scatter(x, y, color='red', label='Исходные узлы')
plt.title('Кубическая интерполяция: полином и сплайн')
plt.xlabel('x')
plt.ylabel('y')
plt.legend()
plt.grid()
plt.show()

import numpy as np
xp = [1, 2, 3]
fp = [3, 2, 0]
np.interp(2.5, xp, fp)
np.interp([0, 1, 1.5, 2.72, 3.14], xp, fp)
UNDEF = -99.0
np.interp(3.14, xp, fp, right=UNDEF)

#Построим интерполянт к синусоидальной функции:

x = np.linspace(0, 2*np.pi, 10)
y = np.sin(x)
xvals = np.linspace(0, 2*np.pi, 50)
yinterp = np.interp(xvals, x, y)
import matplotlib.pyplot as plt
plt.plot(xvals, yinterp,'-x',color='violet',label='Интерполирующая функция')
plt.plot(x, y, 'o',color='crimson', label='Исходные узлы')
plt.xlabel('x')
plt.ylabel('y')
plt.legend()
plt.grid()
plt.show()

import numpy as np
import matplotlib.pyplot as plt
from scipy import interpolate
x = np.arange(0, 10)
y = np.exp(-x/3.0)
f = interpolate.interp1d(x, y)
xnew = np.arange(0, 9, 0.1)
ynew = f(xnew)   # use interpolation function returned by `interp1d`
plt.plot( xnew, ynew, '-',color='blue', label='Интерполирующая функция')
plt.plot(x, y, 'o',color='crimson', label='Исходные узлы')
plt.xlabel('x')
plt.ylabel('y')
plt.legend()
plt.grid()
plt.show()

import numpy as np
from scipy.interpolate import CubicSpline
import matplotlib.pyplot as plt
x = np.arange(10)
y = np.sin(x)
cs = CubicSpline(x, y)
xs = np.arange(-0.5, 9.6, 0.1)
fig, ax = plt.subplots(figsize=(6.5, 4))
ax.plot(x, y, 'o', label='data')
ax.plot(xs, np.sin(xs), label='true')
ax.plot(xs, cs(xs), label="S")
ax.plot(xs, cs(xs, 1), label="S'")
ax.plot(xs, cs(xs, 2), label="S''")
ax.plot(xs, cs(xs, 3), label="S'''")
ax.set_xlim(-0.5, 9.5)
ax.legend(loc='lower left', ncol=2)
plt.xlabel('x')
plt.ylabel('y')
plt.grid()
plt.show()
