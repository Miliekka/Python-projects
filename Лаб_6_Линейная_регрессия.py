# -*- coding: utf-8 -*-
"""ИТМ-23_Хабибуллина_Камилла_Диабет.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Rlgx6XbF9iX_Yo62ZM6eazoasUTw7tY2

Реализация линейной регрессии методом наименьших квадратов
"""

from contextlib import AbstractAsyncContextManager
import numpy as np
import matplotlib.pyplot as plt
from sklearn import datasets
from sklearn.metrics import mean_squared_error
diabetes=datasets.load_diabetes()
A=diabetes.data
b = diabetes.target
np.set_printoptions (precision = 2, threshold=5)
n = A.shape[0]
print('Исходные данные - атрибуты модели:\n', A[:2,:],'\n ... \n' , A[- 2:,:1])

print (A[:2,:], '\n ... \n', A[-2:,:])
print('Целевая функция правая часть b:\n',b.T)

ATA =A.T @ A
ATA_inv = np.linalg.inv(ATA)
x = ATA_inv @ A.T @ b
b_calc =  A @ x

print('Точная правая часть b:\n',b. T, '\n')
print('Pacчëтная правая часть b_саlс:\n',b_calc.T, '\n')
print('Oшибка вектора правой части b_саlс-b\n', (b_calc-b).T, '\n',
      'Средняя абсолютная ошибка sum(abs(b_calc-b))/n =', sum(abs (b_calc-b))/n,'\n',
      'Средний квадрат разности sum (b_calc-b) = ', sum((b_calc-
b)** 2)/n, '\n',
      'Mean_squared_error(b, b_calc) ', mean_squared_error(b,
b_calc), '\n',
      'Root Mean_squared_error(b, b_calc)=', mean_squared_error(b,
b_calc)**(1/2), '\n')

plt.scatter(b,b_calc,c='blue',label = 'Рассчётное b')
plt.plot(b,b,'--',c = 'red',label ='Точное b')
plt.plot([min(b),max(b)],[min (b),max(b)],'--',c = 'green',
label='Точное b')
plt.xlabel("Daктическое Diabetes Progression")
plt.ylabel("Расчëтное Diabetes Progression")
plt.title("Regression: Predicted vs Actual Diabetes Progression")
plt.legend()
plt.show()

"""Псевдообратная матрица Мур-Пенроуза"""

ATA_inv = np.linalg.pinv (A)
x = ATA_inv @ b
b_calc = A @ x
print('Точная правая часть b:\n',b.T, '\n')
print('Pacчëтная правая часть b_саlс:\n',b_calc.T, '\n')
print('Oшибка вектора правой части b_саlс-b\n', (b_calc-b). T, '\n',
      'Средняя абсолютная ошибка sum(abs(b_calc-b))/n =', sum (abs (b_calc-b))/n, '\n',
      'Средний квадрат разности sum(b_calc-b) = ', sum((b_calc-
b)** 2)/n, '\n',
      'Mean_squared_error(b, b_calc) =', mean_squared_error(b,
b_calc), '\n',
      'Root Mean_squared_error(b, b_calc)=', mean_squared_error(b,
b_calc)**(1/2), '\n')

# Visualize predicted vs actual values with different colors plt.scatter (b, b_calc, c='blue', label='Paсчëтное b')
plt.scatter (b, b_calc, c='blue', label='Paсчëтное b')
plt.plot(b, b,'--', c='red', label='Точное b')
plt.plot([min(b), max(b)], [min (b), max(b)], '--', c='green', label='Точное b')
plt.xlabel("@aктическое Diabetes Progression")
plt.ylabel("Pасчëтное Diabetes Progression")
plt.title("Regression: Predicted vs Actual Diabetes Progression")
plt.legend()
plt.show()